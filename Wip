-- FancyField UI Library
-- Optimized for mobile devices
local FancyField = {}
local TweenService = game:GetService("TweenService")

-- Helper Function: Apply Rounded Corners
local function applyUICorner(instance, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = instance
end

-- Helper Function: Tween Visibility (Fade In/Out)
local function tweenVisibility(instance, visible)
    local goal = { BackgroundTransparency = visible and 1 or 0 }
    local tween = TweenService:Create(instance, TweenInfo.new(0.3), goal)
    tween:Play()
end

-- Create a Window (Main UI Container)
function FancyField:CreateWindow(config)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = config.Name or "FancyFieldWindow"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0.9, 0, 0.8, 0) -- Scales well on mobile
    MainFrame.Position = UDim2.new(0.05, 0, 0.1, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Visible = true -- Togglable visibility
    MainFrame.Parent = ScreenGui

    applyUICorner(MainFrame) -- Rounded corners for the main frame

    local TitleBar = Instance.new("TextLabel")
    TitleBar.Size = UDim2.new(1, 0, 0.1, 0)
    TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TitleBar.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleBar.Font = Enum.Font.GothamBold
    TitleBar.TextSize = 18
    TitleBar.TextXAlignment = Enum.TextXAlignment.Left
    TitleBar.Text = "   " .. (config.Title or "FancyField")
    TitleBar.Parent = MainFrame

    applyUICorner(TitleBar)

    -- Toggle Button to Show/Hide Window
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0.15, 0, 0.05, 0)
    ToggleButton.Position = UDim2.new(0.85, -10, -0.05, -10)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80) -- Green color
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.TextSize = 14
    ToggleButton.Text = "Toggle"
    ToggleButton.Parent = ScreenGui

    applyUICorner(ToggleButton)

    -- Functionality to toggle visibility of the main frame
    ToggleButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = not MainFrame.Visible
        tweenVisibility(MainFrame, not MainFrame.Visible)
    end)

    return {
        Gui = ScreenGui,
        Frame = MainFrame,
        AddTab = function(self, tabName)
            return FancyField:CreateTab(self.Frame, tabName)
        end,
        AddNotification = function(self, message)
            return FancyField:CreateNotification(self.Gui, message)
        end,
        AddSearchBar = function(self, placeholderText)
            return FancyField:CreateSearchBar(self.Frame, placeholderText or "Search...")
        end,
        AddTextbox = function(self, placeholderText)
            return FancyField:CreateTextbox(self.Frame, placeholderText or "Enter Text...")
        end,
        AddDropdownMenu = function(self, optionsTable)
            return FancyField:CreateDropdownMenu(self.Frame, optionsTable or {})
        end,
        AddSlider = function(self, minValue, maxValue)
            return FancyField:CreateSlider(self.Frame, minValue or 0, maxValue or 100)
        end,
    }
end
-- Create a Tab (Switchable Sections of the Window)
function FancyField:CreateTab(parentFrame, tabName)
    local TabContainer = parentFrame:FindFirstChild("TabContainer") or Instance.new("Folder")
    if not TabContainer.Parent then
        TabContainer.Name = "TabContainer"
        TabContainer.Parent = parentFrame
    end

    -- Create a button for the tab
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(0.2, -10, 0.05, -5)
    TabButton.Position = UDim2.new(0.05 + (#TabContainer:GetChildren() * 0.22), 0, 0.12, 0)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.Font = Enum.Font.Gotham
    TabButton.TextSize = 14
    TabButton.Text = tabName or "Tab"
    TabButton.Parent = parentFrame

    applyUICorner(TabButton)

    -- Create a frame for the tab content
    local TabFrame = Instance.new("ScrollingFrame")
    TabFrame.Size = UDim2.new(1, -20, 0.8, -50)
    TabFrame.Position = UDim2.new(0.05, 10, 0.2, 10)
    TabFrame.BackgroundTransparency = 1
    TabFrame.Visible = false
    TabFrame.ScrollBarThickness = 5
    TabFrame.Parent = parentFrame

    -- Toggle visibility of the tab content when the button is clicked
    TabButton.MouseButton1Click:Connect(function()
        for _, child in ipairs(parentFrame:GetChildren()) do
            if child:IsA("ScrollingFrame") then
                child.Visible = false
            end
        end
        TabFrame.Visible = true
    end)

    return {
        Frame = TabFrame,
        AddSection = function(self, sectionName)
            return FancyField:CreateSection(self.Frame, sectionName)
        end,
    }
end

-- Create a Section (Organized Areas within Tabs)
function FancyField:CreateSection(parentTabFrame, sectionName)
    local SectionLabel = Instance.new("TextLabel")
    SectionLabel.Size = UDim2.new(1, -20, 0.05, -5)
    SectionLabel.Position = UDim2.new(0.05 + (#parentTabFrame:GetChildren() * 0.06), -10)
    SectionLabel.BackgroundTransparency = 1
    SectionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    SectionLabel.Font = Enum.Font.GothamBold
    SectionLabel.TextSize = 16
    SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    SectionLabel.TextYAlignment = Enum.TextYAlignment.Top
    SectionLabel.Text = sectionName or "Section"
    SectionLabel.Parent = parentTabFrame

    return {
        AddButton = function(self, buttonText, callback)
            return FancyField:CreateButton(parentTabFrame, buttonText or "Button", callback)
        end,
        AddSlider = function(self, sliderText, minValue, maxValue, callback)
            return FancyField:CreateSlider(parentTabFrame, sliderText or "Slider", minValue or 0, maxValue or 100, callback)
        end,
        AddTextbox = function(self, placeholderText, callback)
            return FancyField:CreateTextbox(parentTabFrame, placeholderText or "Enter Text...", callback)
        end,
        AddDropdownMenu = function(self, optionsTable, callback)
            return FancyField:CreateDropdownMenu(parentTabFrame, optionsTable or {}, callback)
        end,
        AddToggle = function(self, toggleText, callback)
            return FancyField:CreateToggle(parentTabFrame, toggleText or "Toggle", callback)
        end,
    }
end
-- Create a Button (Clickable Action Component)
function FancyField:CreateButton(parentSectionFrame, buttonText, callback)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, -20, 0.05, -5)
    Button.Position = UDim2.new(0.05 + (#parentSectionFrame:GetChildren() * 0.06), -10)
    Button.BackgroundColor3 = Color3.fromRGB(76, 175, 80) -- Green color
    Button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
    Button.Font = Enum.Font.GothamBold
    Button.TextSize = 14
    Button.TextXAlignment = Enum.TextXAlignment.Center
    Button.TextYAlignment = Enum.TextYAlignment.Center
    Button.Text = buttonText or "Click Me"
    Button.Parent = parentSectionFrame

    applyUICorner(Button)

    -- Connect the button click to the provided callback function
    Button.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)

    return Button
end-- Create a Slider (Adjustable Value Selector)
function FancyField:CreateSlider(parentSectionFrame, sliderText, minValue, maxValue, callback)
    local SliderContainer = Instance.new("Frame")
    SliderContainer.Size = UDim2.new(1, -20, 0.1, 0)
    SliderContainer.Position = UDim2.new(0.05, 0, (#parentSectionFrame:GetChildren() * 0.12), 0)
    SliderContainer.BackgroundTransparency = 1
    SliderContainer.Parent = parentSectionFrame

    local SliderLabel = Instance.new("TextLabel")
    SliderLabel.Size = UDim2.new(1, -60, 0.4, 0)
    SliderLabel.Position = UDim2.new(0, 10, 0, 0)
    SliderLabel.BackgroundTransparency = 1
    SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.Font = Enum.Font.GothamBold
    SliderLabel.TextSize = 14
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    SliderLabel.Text = sliderText or "Slider"
    SliderLabel.Parent = SliderContainer

    local ValueDisplay = Instance.new("TextLabel")
    ValueDisplay.Size = UDim2.new(0.3, -10, 0.4, 0)
    ValueDisplay.Position = UDim2.new(0.7, 10, 0, 0)
    ValueDisplay.BackgroundTransparency = 1
    ValueDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueDisplay.Font = Enum.Font.GothamBold
    ValueDisplay.TextSize = 14
    ValueDisplay.TextXAlignment = Enum.TextXAlignment.Right
    ValueDisplay.Text = tostring(minValue)
    ValueDisplay.Parent = SliderContainer

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0.3, 0)
    SliderBar.Position = UDim2.new(0.05, 10, 0.6, -5)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    applyUICorner(SliderBar)
    SliderBar.Parent = SliderContainer

    local FillBar = Instance.new("Frame")
    FillBar.Size = UDim2.new(0, 0, 1, 0)
    FillBar.BackgroundColor3 = Color3.fromRGB(76, 175, 80) -- Green fill
    applyUICorner(FillBar)
    FillBar.Parent = SliderBar

    local DragButton = Instance.new("ImageButton")
    DragButton.Size = UDim2.new(0.05, -5, 1.5, -5)
    DragButton.ImageTransparency = 1 -- Invisible button for dragging
    DragButton.Parent = FillBar

    -- Functionality for dragging the slider
    local function updateSlider(inputPosition)
        local relativePosition =
            math.clamp((inputPosition.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X,
                       0,
                       1)
        FillBar.Size =
            UDim2.new(relativePosition,
                      FillBar.Size.X.Offset,
                      FillBar.Size.Y.Scale,
                      FillBar.Size.Y.Offset)

        local currentValue =
            math.floor(relativePosition * (maxValue - minValue) + minValue)

        ValueDisplay.Text =
            tostring(currentValue)

        if callback then callback(currentValue) end end

DragButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then end
